// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: EXTesting.proto

// <your-service-name-or-feature>

package example

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestingService_Store_FullMethodName         = "/example.TestingService/Store"
	TestingService_RollbackStore_FullMethodName = "/example.TestingService/RollbackStore"
)

// TestingServiceClient is the client API for TestingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestingServiceClient interface {
	Store(ctx context.Context, in *TestingRequest, opts ...grpc.CallOption) (*EXResponse, error)
	RollbackStore(ctx context.Context, in *RollBackRequest, opts ...grpc.CallOption) (*EXResponse, error)
}

type testingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestingServiceClient(cc grpc.ClientConnInterface) TestingServiceClient {
	return &testingServiceClient{cc}
}

func (c *testingServiceClient) Store(ctx context.Context, in *TestingRequest, opts ...grpc.CallOption) (*EXResponse, error) {
	out := new(EXResponse)
	err := c.cc.Invoke(ctx, TestingService_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testingServiceClient) RollbackStore(ctx context.Context, in *RollBackRequest, opts ...grpc.CallOption) (*EXResponse, error) {
	out := new(EXResponse)
	err := c.cc.Invoke(ctx, TestingService_RollbackStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestingServiceServer is the server API for TestingService service.
// All implementations must embed UnimplementedTestingServiceServer
// for forward compatibility
type TestingServiceServer interface {
	Store(context.Context, *TestingRequest) (*EXResponse, error)
	RollbackStore(context.Context, *RollBackRequest) (*EXResponse, error)
	mustEmbedUnimplementedTestingServiceServer()
}

// UnimplementedTestingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestingServiceServer struct {
}

func (UnimplementedTestingServiceServer) Store(context.Context, *TestingRequest) (*EXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedTestingServiceServer) RollbackStore(context.Context, *RollBackRequest) (*EXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackStore not implemented")
}
func (UnimplementedTestingServiceServer) mustEmbedUnimplementedTestingServiceServer() {}

// UnsafeTestingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestingServiceServer will
// result in compilation errors.
type UnsafeTestingServiceServer interface {
	mustEmbedUnimplementedTestingServiceServer()
}

func RegisterTestingServiceServer(s grpc.ServiceRegistrar, srv TestingServiceServer) {
	s.RegisterService(&TestingService_ServiceDesc, srv)
}

func _TestingService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).Store(ctx, req.(*TestingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestingService_RollbackStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestingServiceServer).RollbackStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestingService_RollbackStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestingServiceServer).RollbackStore(ctx, req.(*RollBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestingService_ServiceDesc is the grpc.ServiceDesc for TestingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.TestingService",
	HandlerType: (*TestingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _TestingService_Store_Handler,
		},
		{
			MethodName: "RollbackStore",
			Handler:    _TestingService_RollbackStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "EXTesting.proto",
}
